<?xml version="1.0"?><st-source><component-created><name>CS474</name> <type>package</type></component-created><class><name>Node</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>Key Value Left Right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CS474</package></attributes></class><class><name>NewDictionary</name><environment>Smalltalk</environment><super>Core.Collection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>Dictionary </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CS474</package></attributes></class><class><name>BST</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>Root </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CS474</package></attributes></class><class><name>SortedDictionary</name><environment>Smalltalk</environment><super>NewDictionary</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sortedKeys dict </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CS474</package></attributes></class><class><name>TreeDictionary</name><environment>Smalltalk</environment><super>NewDictionary</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bst </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CS474</package></attributes></class><class><name>Application</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>Created sd td Value1 Key1 Key2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CS474</package></attributes></class><class><name>DictionaryPair</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>Length Keys Values keyAdded </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CS474</package></attributes></class><class><name>Stack</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>Items Len </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>CS474</package></attributes></class><methods><class-id>DictionaryPair class</class-id> <category>instance creation</category><body package="CS474" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>DictionaryPair</class-id> <category>Methods</category><body package="CS474" selector="getLength">getLength^Length.</body></methods><methods><class-id>DictionaryPair</class-id> <category>Methods</category><body package="CS474" selector="SetKey:">SetKey:Key(Keys includes: Key)ifFalse: [keyAdded := keyAdded + 1. Keys add: Key. ^self.].</body></methods><methods><class-id>DictionaryPair</class-id> <category>Methods</category><body package="CS474" selector="GetValue:">GetValue:Key| index |index := 1.[(Keys at: index) ~= Key]whileTrue: [index := index +1.].^Values at: index.</body></methods><methods><class-id>DictionaryPair</class-id> <category>Methods</category><body package="CS474" selector="GetKey:">GetKey:Index^Keys at:Index.</body></methods><methods><class-id>DictionaryPair</class-id> <category>Methods</category><body package="CS474" selector="SetValue:">SetValue:Value(Length &lt; keyAdded)ifTrue:[Values add: Value.	Length := Length +1.^self.].</body></methods><methods><class-id>DictionaryPair</class-id> <category>accessing</category><body package="CS474" selector="values">values	^Values</body></methods><methods><class-id>DictionaryPair</class-id> <category>accessing</category><body package="CS474" selector="length:">length: anObject	Length := anObject</body></methods><methods><class-id>DictionaryPair</class-id> <category>accessing</category><body package="CS474" selector="keys">keys	^Keys</body></methods><methods><class-id>DictionaryPair</class-id> <category>accessing</category><body package="CS474" selector="values:">values: anObject	Values := anObject</body></methods><methods><class-id>DictionaryPair</class-id> <category>accessing</category><body package="CS474" selector="keys:">keys: anObject	Keys := anObject</body></methods><methods><class-id>DictionaryPair</class-id> <category>accessing</category><body package="CS474" selector="length">length	^Length</body></methods><methods><class-id>DictionaryPair</class-id> <category>initialize-release</category><body package="CS474" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	Length := 0.	Keys := OrderedCollection new.	Values := OrderedCollection new.	keyAdded := 0.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>NewDictionary class</class-id> <category>instance creation</category><body package="CS474" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>NewDictionary</class-id> <category>Methods</category><body package="CS474" selector="adddictionaryvalue:">adddictionaryvalue:valueDictionary SetValue: value.</body></methods><methods><class-id>NewDictionary</class-id> <category>Methods</category><body package="CS474" selector="at:">at:keyself subclassResponsibility.</body></methods><methods><class-id>NewDictionary</class-id> <category>Methods</category><body package="CS474" selector="at:put:">at:key put:valueself subclassResponsibility.</body></methods><methods><class-id>NewDictionary</class-id> <category>Methods</category><body package="CS474" selector="keys">keysself subclassResponsibility.</body></methods><methods><class-id>NewDictionary</class-id> <category>Methods</category><body package="CS474" selector="adddictionarykey:">adddictionarykey:keyDictionary SetKey: key.</body></methods><methods><class-id>NewDictionary</class-id> <category>Methods</category><body package="CS474" selector="values">valuesself subclassResponsibility.</body></methods><methods><class-id>NewDictionary</class-id> <category>Methods</category><body package="CS474" selector="allPairs">allPairs| dict index subdict|dict := OrderedCollection new.index := 1.[index &lt; ((Dictionary getLength) +1)]whileTrue:[	subdict := OrderedCollection new. 	subdict add: (Dictionary GetKey:index). 	subdict add: (Dictionary GetValue: (Dictionary GetKey:index)). 	dict add: subdict. 	index := index + 1.].^dict.</body></methods><methods><class-id>NewDictionary</class-id> <category>initialize-release</category><body package="CS474" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	Dictionary := DictionaryPair new.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>NewDictionary</class-id> <category>removing</category><body package="CS474" selector="remove:ifAbsent:">remove: oldObject ifAbsent: anExceptionBlockself shouldNotImplement.</body></methods><methods><class-id>NewDictionary</class-id> <category>adding</category><body package="CS474" selector="add:">add: entry| key val col|col := OrderedCollection new.key := Dictionary keys.(key includes: (entry at: 1))ifFalse: [Dictionary SetKey: (entry at: 1).Dictionary SetValue: (entry at: 2).]ifTrue: [1 to: key size do: [:index|		((key at:index)=(entry at: 1))ifTrue: [val := Dictionary values. col add:(entry at: 1).col add: (val at: index).val at: index put: (entry at:2). ^col.].	].]</body></methods><methods><class-id>NewDictionary</class-id> <category>enumerating</category><body package="CS474" selector="do:">do: aBlock</body></methods><methods><class-id>Application class</class-id> <category>interface specs</category><body package="CS474" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Dictionary' 			#bounds: #(#{Graphics.Rectangle} 64 31 1216 728 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 268 0 98 0 404 0 119 0 ) 					#name: #ActionButton1 					#model: #NewTreeDictionary 					#label: 'New Tree Dictionary' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 720 0 95 0 855 0 116 0 ) 					#name: #ActionButton2 					#model: #NewSortedDictonary 					#label: 'New Sorted Dictonary' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 437 0 150 0 ) 					#name: #Label1 					#label: 'Latest created dictionary: No dictionary created yet' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 230 0 75 0 ) 					#name: #Label2 					#label: 'Click here to create a new Tree Dictionary' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 679 0 74 0 ) 					#name: #Label3 					#label: 'Click here to create a new Sorted Dictionary' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 254 0 212 0 ) 					#name: #Label4 					#label: 'Insertion of a key value pair' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 366 0 252 0 466 0 271 0 ) 					#name: #InputField1 					#model: #Key1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 606 0 250 0 706 0 269 0 ) 					#name: #InputField2 					#model: #Value1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 758 0 248 0 810 0 269 0 ) 					#name: #ActionButton3 					#model: #Insert 					#label: 'Insert' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 329 0 253 0 ) 					#name: #Label5 					#label: 'Key' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 568 0 252 0 ) 					#name: #Label6 					#label: 'Value' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 255 0 310 0 ) 					#name: #Label7 					#label: 'Retriving a value by it''s key' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 328 0 350 0 ) 					#name: #Label8 					#label: 'Key' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 521 0 349 0 573 0 370 0 ) 					#name: #ActionButton4 					#model: #Retive 					#label: 'Retrive' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 368 0 350 0 468 0 369 0 ) 					#name: #InputField3 					#model: #Key2 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 663 0 353 0 ) 					#name: #Label9 					#label: 'Value is:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 711 0 354 0 ) 					#name: #Label10 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 259 0 400 0 ) 					#name: #Label11 					#label: 'Click here to get all entries in a dictionary' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 482 0 401 0 552 0 421 0 ) 					#name: #ActionButton5 					#model: #AllPairs 					#label: 'All Entries' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 299 0 436 0 ) 					#name: #Label12 					#label: 'Entries are:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 253 0 513 0 ) 					#name: #Label13 					#label: 'Click here to get all the keys in sorted order' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 486 0 510 0 538 0 531 0 ) 					#name: #ActionButton6 					#model: #AllKeys 					#label: 'All Keys' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 297 0 549 0 ) 					#name: #Label14 					#label: 'keys are:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 262 0 581 0 ) 					#name: #Label15 					#label: 'Click here to get all the values' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 430 0 579 0 482 0 600 0 ) 					#name: #ActionButton7 					#model: #AllValues 					#label: 'All Values' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 298 0 610 0 ) 					#name: #Label16 					#label: 'values are:' ) ) ) )</body></methods><methods><class-id>Application</class-id> <category>aspects</category><body package="CS474" selector="Created">Created	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^Created isNil		ifTrue:			[Created := String new asValue]		ifFalse:			[Created]</body></methods><methods><class-id>Application</class-id> <category>aspects</category><body package="CS474" selector="Key1">Key1	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^Key1 isNil		ifTrue:			[Key1 := String new asValue]		ifFalse:			[Key1]</body></methods><methods><class-id>Application</class-id> <category>aspects</category><body package="CS474" selector="Key2">Key2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^Key2 isNil		ifTrue:			[Key2 := String new asValue]		ifFalse:			[Key2]</body></methods><methods><class-id>Application</class-id> <category>aspects</category><body package="CS474" selector="Value1">Value1	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^Value1 isNil		ifTrue:			[Value1 := String new asValue]		ifFalse:			[Value1]</body></methods><methods><class-id>Application</class-id> <category>actions</category><body package="CS474" selector="AllPairs">AllPairs| entries  st|st := 'Entries are:'.entries := OrderedCollection new.(td = nil)ifTrue: [		1 to: ((sd keys) size) do:[:index|entries add:((sd keys) at:index).entries add:((sd values) at:index).].	] ifFalse: [		1 to: ((td keys) size) do:[:index|entries add:((td keys) at:index).entries add:((td values) at:index).].	].	entries do: [:x|st := st,(x printString)].	(self widgetAt: #Label12)labelString:st.</body></methods><methods><class-id>Application</class-id> <category>actions</category><body package="CS474" selector="Insert">Insert(sd = nil)ifTrue:[	td at: (Key1 value) put: (Value1 value)	]		ifFalse:[	sd at: (Key1 value) put: (Value1 value)	].</body></methods><methods><class-id>Application</class-id> <category>actions</category><body package="CS474" selector="NewTreeDictionary">NewTreeDictionarytd := TreeDictionary new.sd := nil.(self widgetAt: #Label1)labelString: 'Latest created dictionary: tree dictionary and deleted old entry at: ',((Date dateAndTimeNow) printString).</body></methods><methods><class-id>Application</class-id> <category>actions</category><body package="CS474" selector="AllValues">AllValues| values st|st := 'Values are:'.values := OrderedCollection new.(sd = nil)ifTrue: [values := td values.] ifFalse: [values := sd values.].values do: [:x|st := st,(x printString)].(self widgetAt: #Label16)labelString:st.</body></methods><methods><class-id>Application</class-id> <category>actions</category><body package="CS474" selector="NewSortedDictonary">NewSortedDictonarysd := SortedDictionary new.td := nil.(self widgetAt: #Label1)labelString:'Latest created dictionary: sorted dictionary and deleted old entry at: ',((Date dateAndTimeNow) printString).</body></methods><methods><class-id>Application</class-id> <category>actions</category><body package="CS474" selector="AllKeys">AllKeys| keys st|st := 'Keys are:'.keys := OrderedCollection new.(sd = nil)ifTrue: [keys := td keys.] ifFalse: [keys := sd keys.].keys do: [:x|st := st,(x printString)].(self widgetAt: #Label14)labelString:st.^keys.</body></methods><methods><class-id>Application</class-id> <category>actions</category><body package="CS474" selector="Retive">Retive| value |(sd = nil)ifTrue:[	value := td at: (Key2 value).]ifFalse: [ value := sd at: (Key2 value).].(value = nil)ifFalse: [(self widgetAt: #Label10)labelString:value.]ifTrue: [(self widgetAt: #Label10)labelString:'There is no such key in the dictionary, please recheck.'].</body></methods><methods><class-id>Application</class-id> <category>initialize-release</category><body package="CS474" selector="Initialize">Initializesd := nil.td := nil.</body></methods><methods><class-id>BST class</class-id> <category>instance creation</category><body package="CS474" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>BST</class-id> <category>Methods</category><body package="CS474" selector="Show">Show| st temp col|st := Stack new.col := OrderedCollection new.(Root ~= nil)ifTrue: [	temp := Root.	[temp ~= nil]whileTrue: [st push:temp. temp:= temp left.].	[st len ~= 0]whileTrue: [		temp := st pop. 		col add:(temp key). col add:(temp value).		((temp right) ~= nil)ifTrue: [			temp := temp right.			[temp ~=nil]whileTrue: [st push:temp. temp := temp left.].			].		].	].^col</body></methods><methods><class-id>BST</class-id> <category>Methods</category><body package="CS474" selector="Insert:">Insert:Col| node temp end exit|exit := 0.(Root = nil)ifTrue: [	Root := Node new.	Root key:(Col at: 1).	Root value:(Col at: 2).	Root left: nil.	Root right:nil.	]ifFalse: [	node := Node new.	node key:(Col at: 1).	node value:(Col at: 2).	node left:nil.	node right: nil.		temp := Root.	[temp~=nil]whileTrue:[		end := temp.		(temp key ~= node key)ifTrue: [(temp key &gt; node key)ifTrue: [temp := temp left.]ifFalse: [temp := temp right.].]		ifFalse: [temp value:node value. exit := 1. ^0.].		].	(exit = 0)ifTrue: [(end key &gt; node key)ifTrue: [end left: node.]ifFalse: [end right: node.].	].	].</body></methods><methods><class-id>BST</class-id> <category>accessing</category><body package="CS474" selector="root">root	^Root</body></methods><methods><class-id>BST</class-id> <category>accessing</category><body package="CS474" selector="root:">root: anObject	Root := anObject</body></methods><methods><class-id>BST</class-id> <category>initialize-release</category><body package="CS474" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	Root := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>TreeDictionary</class-id> <category>initialize-release</category><body package="CS474" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	bst := BST new.	^self</body></methods><methods><class-id>TreeDictionary</class-id> <category>Methods</category><body package="CS474" selector="values">values| valuecol col|col := OrderedCollection new.valuecol := OrderedCollection new.col := bst Show.2 to:col size by:2 do:[:index|	valuecol add:(col at:index).].^valuecol.</body></methods><methods><class-id>TreeDictionary</class-id> <category>Methods</category><body package="CS474" selector="at:">at:key| temp found|found := 0.temp := bst Show.1 to: temp size do: [:index|((temp at: index) = key)ifTrue: [found := 1.^(temp at:(index+1))]].(found = 0)ifTrue: [^nil].</body></methods><methods><class-id>TreeDictionary</class-id> <category>Methods</category><body package="CS474" selector="at:put:">at:key put:value| col |col := OrderedCollection new.col add:key.col add:value.bst Insert: col.^self</body></methods><methods><class-id>TreeDictionary</class-id> <category>Methods</category><body package="CS474" selector="keys">keys| keycol col|col := OrderedCollection new.keycol := OrderedCollection new.col := bst Show.1 to:col size by:2 do:[:index|	keycol add:(col at:index).].^keycol.</body></methods><methods><class-id>TreeDictionary</class-id> <category>enumerating</category><body package="CS474" selector="do:">do:block| initDict finalDIct |initDict := bst Show.finalDIct := OrderedCollection new.1 to: initDict size do: [:index|	finalDIct add:(block value:(initDict at:index)).	].^finalDIct.</body></methods><methods><class-id>Stack class</class-id> <category>instance creation</category><body package="CS474" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Stack</class-id> <category>accessing</category><body package="CS474" selector="items">items	^Items</body></methods><methods><class-id>Stack</class-id> <category>accessing</category><body package="CS474" selector="len">len	^Len</body></methods><methods><class-id>Stack</class-id> <category>accessing</category><body package="CS474" selector="items:">items: anObject	Items := anObject</body></methods><methods><class-id>Stack</class-id> <category>accessing</category><body package="CS474" selector="len:">len: anObject	Len := anObject</body></methods><methods><class-id>Stack</class-id> <category>methods</category><body package="CS474" selector="push:">push:itemItems add:item.Len := Len +1.</body></methods><methods><class-id>Stack</class-id> <category>methods</category><body package="CS474" selector="isEmpty">isEmpty(Len = 0)ifTrue: [^true]ifFalse: [^false].</body></methods><methods><class-id>Stack</class-id> <category>methods</category><body package="CS474" selector="pop">pop Len := Len - 1.^Items removeLast.</body></methods><methods><class-id>Stack</class-id> <category>initialize-release</category><body package="CS474" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	Items := OrderedCollection new.	Len := 0.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>SortedDictionary</class-id> <category>initialize-release</category><body package="CS474" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	sortedKeys := SortedCollection new.	dict := OrderedCollection new.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>SortedDictionary</class-id> <category>Methods</category><body package="CS474" selector="keys">keys^sortedKeys.</body></methods><methods><class-id>SortedDictionary</class-id> <category>Methods</category><body package="CS474" selector="at:put:">at:key put:value(sortedKeys includes: key)ifFalse: [sortedKeys add:key.dict add:key.dict add:value.]ifTrue: [1 to: dict size by: 2 do: [:index|		((dict at: index) = key)ifTrue: [dict at: (index + 1) put: value.].	].].^self.</body></methods><methods><class-id>SortedDictionary</class-id> <category>Methods</category><body package="CS474" selector="values">values| key sortedValues |sortedValues := OrderedCollection new.1 to: sortedKeys size do: [ :index|	key := sortedKeys at:index.	1 to: dict size by: 2 do: [:index1|			((dict at: index1) = key)ifTrue: [sortedValues add:(dict at: (index1 + 1)).]		].	].^sortedValues.</body></methods><methods><class-id>SortedDictionary</class-id> <category>Methods</category><body package="CS474" selector="at:">at:key| found |found :=0.1 to: dict size do: [:ind|	((dict at:ind) = key)ifTrue: [found := 1.^dict at:(ind + 1).].	].(found = 0)ifTrue: [^nil].</body></methods><methods><class-id>SortedDictionary</class-id> <category>enumerating</category><body package="CS474" selector="do:">do: block| tempkey tempvalue col |col := OrderedCollection new.1 to: sortedKeys size do: [:index|	tempkey := sortedKeys at:index.	1 to: dict size by:2 do:[:index1| 		((dict at:index1)=tempkey)ifTrue: [			tempkey := (block value: tempkey).  			tempvalue := (block value:(dict at:(index1+1))).			].		].	col add:tempkey.	col add:tempvalue.		].^col.</body></methods><methods><class-id>Node class</class-id> <category>instance creation</category><body package="CS474" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Node</class-id> <category>initialize-release</category><body package="CS474" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	Key := nil.	Value := nil.	Left := nil.	Right := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Node</class-id> <category>accessing</category><body package="CS474" selector="value:">value: anObject	Value := anObject</body></methods><methods><class-id>Node</class-id> <category>accessing</category><body package="CS474" selector="right">right	^Right</body></methods><methods><class-id>Node</class-id> <category>accessing</category><body package="CS474" selector="left:">left: anObject	Left := anObject</body></methods><methods><class-id>Node</class-id> <category>accessing</category><body package="CS474" selector="value">value	^Value</body></methods><methods><class-id>Node</class-id> <category>accessing</category><body package="CS474" selector="key:">key: anObject	Key := anObject</body></methods><methods><class-id>Node</class-id> <category>accessing</category><body package="CS474" selector="left">left	^Left</body></methods><methods><class-id>Node</class-id> <category>accessing</category><body package="CS474" selector="key">key	^Key</body></methods><methods><class-id>Node</class-id> <category>accessing</category><body package="CS474" selector="right:">right: anObject	Right := anObject</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\srujan\Documents\VisualWorks Projects\Project1Submission\Project1Submission.im' 'February 20, 2018' '5:39:22 AM')""An image file c:\Users\srujan\Documents\VisualWorks Projects\Project1Submission\Project1Submission.im was created at 5:39:22 AM on February 20, 2018."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\srujan\Documents\VisualWorks Projects\Project1Submission\Project1Submission.im' 'February 20, 2018' '5:39:26 AM')""An image file c:\Users\srujan\Documents\VisualWorks Projects\Project1Submission\Project1Submission.im was created at 5:39:26 AM on February 20, 2018."</do-it><do-it>|st col|st := SortedDictionary new.col := OrderedCollection new.col add:'abc'.col add:'abc'.st at:'abc' put:'abc'.st allPairs.</do-it><do-it>st := SortedDictionary new.col := OrderedCollection new.col add:'abc'.col add:'abc'.st at:'abc' put:'abc'.st keys.</do-it><do-it>st := SortedDictionary new.col := OrderedCollection new.col add:'abc'.col add:'abc'.st at:'abc' put:'abc'.st keys.st add:col.st keys.</do-it><do-it>st := SortedDictionary new.col := OrderedCollection new.col add:'abc'.col add:'abc'.st at:'abc' put:'abc'.st keys.st add:col.st keys.st allPairs.</do-it><do-it>st := SortedDictionary new.col := OrderedCollection new.col add:'abc'.col add:'abc'.st at:'abc' put:'abc'.st keys.st add:col.st keys.st allPairs.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\srujan\Documents\VisualWorks Projects\Project1Submission\Project1Submission.im' 'February 27, 2018' '1:32:05 PM')""An image file c:\Users\srujan\Documents\VisualWorks Projects\Project1Submission\Project1Submission.im was created at 1:32:05 PM on February 27, 2018."</do-it>